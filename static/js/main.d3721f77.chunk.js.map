{"version":3,"sources":["static/Keyboard.ts","components/ui/button/Button.tsx","components/vocabulary-screen/vocabulary-input/VocabularyInput.tsx","components/vocabulary-screen/vocbulary-table/VocabularyTable.tsx","components/vocabulary-screen/vocabulary-tools/VocabularyTools.tsx","models/KahootQuiz.ts","models/KahootQuestion.ts","helpers/Random.ts","helpers/Kahoot.ts","services/KahootService.ts","components/vocabulary-screen/vocabulary-download-popup/VocabularyDownloadPopup.tsx","components/vocabulary-screen/VocabularyScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Keyboard","ENTER","TAB","Button","className","DEFAULT_CLASS_NAME","undefined","this","props","getClassName","onClick","children","React","PureComponent","VocabularyInput","termRef","answerRef","createRef","state","term","answer","current","focus","event","setState","currentTarget","value","key","onSubmit","inputValuesAreValid","clearState","alert","termLength","trim","length","answerLength","renderInput","onInputTerm","onKeyDownTerm","onInputAnswer","onKeyDownAnswer","bind","placeholder","maxLength","onInput","onKeyPress","ref","type","onKeyDown","Component","VocabularyTable","index","onRemoveRow","renderTableBody","data","renderNoDataMessage","context","nodes","forEach","element","push","VocabularyTools","checked","onChangeRandomOrder","parseInt","onChangeTimeLimit","onInputQuestionsPerQuiz","onInputDocumentName","Fragment","timeLimit","onChange","onChangeSecondsPerQuestion","onInputQuestionPerQuiz","onClickClear","onClickSwap","onClickDownload","KahootQuiz","_questions","_timeLimit","kahootQuestion","KahootQuestion","question","answers","answerPosition","_question","_answers","_answerPosition","Random","minimum","maximum","Math","floor","random","array","newArray","i","randomIndex","number","temporary","Kahoot","kahootQuiz","quizToXLSXFormat","unshift","workbook","XLSX","utils","book_new","SheetNames","Sheets","aoa_to_sheet","result","questions","concat","toString","KahootService","questionsPerQuiz","availableAnswers","map","buffer","bufferSize","createSingleQuestion","toRecover","shiftBuffer","segmentizeQuiz","exportToXLSX","answerIndex","indexOf","addToBuffer","splice","pickRandomAnswers","position","randomAnswer","kahootQuizzes","kahootQuestions","kahootQuizSize","currentQuizSize","currentKahootQuiz","VocabularyDownloadPopup","downloadables","documentName","getDocumentName","writeFile","hidden","onClose","renderDownloadables","VocabularyScreen","randomOrder","questionPerQuiz","downloadPopupHidden","newState","arrayOrder","dataHasFourOrMoreEntries","createQuiz","onSubmitVocabularyInput","onChangeTimeLimitVocabularyTools","onChangeRandomOrderVocabularyTools","onInputQuestionPerQuizVocabularyTools","onInputDocumentNameVocabularyTools","onClickClearVocabularyTools","onClickSwapVocabubaryTools","onClickDownloadVocabularyTools","onRemoveRowVocabularyTable","onClickCloseVocabularyDownloadPopup","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iYAAaA,EAAb,kCAAaA,EAEcC,MAAgB,QAF9BD,EAGcE,IAAc,M,ICKnCC,E,6KAME,IAAIC,EAAoBD,EAAOE,mBAG/B,YAF6BC,IAAzBC,KAAKC,MAAMJ,YAAyBA,GAAY,IAAMG,KAAKC,MAAMJ,WAE9DA,I,+BAKP,OACI,wBAAQA,UAAWG,KAAKE,eAAgBC,QAASH,KAAKC,MAAME,QAA5D,SAAsEH,KAAKC,MAAMG,e,GAfxEC,IAAMC,eAArBV,EAEsBE,mBAA6B,0BAkB1CF,QC2IAW,E,kDAlJX,WAAmBN,GAClB,IAAD,8BACI,cAAMA,IALOO,aAIjB,IAHiBC,eAGjB,EAGI,EAAKD,QAAUH,IAAMK,YACrB,EAAKD,UAAYJ,IAAMK,YAEvB,EAAKC,MAAQ,CACTC,KAAM,GACNC,OAAQ,IARhB,E,gEAiBC,IAAD,EACI,UAAAb,KAAKQ,QAAQM,eAAb,SAAsBC,U,kCAQPC,GAEfhB,KAAKiB,SAAS,CAACL,KAAMI,EAAME,cAAcC,U,oCAGxBH,GAEjBhB,KAAKiB,SAAS,CAACJ,OAAQG,EAAME,cAAcC,U,oCAQ1BH,GACpB,IAAD,EACQA,EAAMI,MAAQ3B,EAASC,QAAO,UAAAM,KAAKS,UAAUK,eAAf,SAAwBC,W,sCAGvCC,GAEfA,EAAMI,MAAQ3B,EAASC,OAASsB,EAAMI,MAAQ3B,EAASE,KAAKK,KAAKqB,a,iCAUpC,IAAD,EAA5BrB,KAAKsB,uBACLtB,KAAKuB,aAEL,UAAAvB,KAAKQ,QAAQM,eAAb,SAAsBC,QACtBf,KAAKC,MAAMoB,SAASrB,KAAKW,MAAMC,KAAMZ,KAAKW,MAAME,SAEhDW,MAAM,yB,4CAUV,IAAIC,EAAqBzB,KAAKW,MAAMC,KAAKc,OAAOC,OAC5CC,EAAuB5B,KAAKW,MAAME,OAAOa,OAAOC,OAEpD,OAAQF,EAAa,GAAKG,EAAe,I,mCAUzC5B,KAAKiB,SAAS,CACVL,KAAM,GACNC,OAAQ,O,+BAWZ,OACI,sBAAKhB,UAAW,wDAAhB,UACKG,KAAK6B,YACF7B,KAAKW,MAAMC,KAAM,OAAQ,IACzBZ,KAAK8B,YAAa9B,KAAK+B,cACvB/B,KAAKQ,SAGT,sBAAMX,UAAW,qBAAjB,oBAECG,KAAK6B,YACF7B,KAAKW,MAAME,OAAQ,SAAU,GAC7Bb,KAAKgC,cAAehC,KAAKiC,gBACzBjC,KAAKS,WAGT,cAAC,EAAD,CACIZ,UAAW,wDACXM,QAASH,KAAKqB,SAASa,KAAKlC,MAFhC,oB,kCAWRmB,EAAegB,EAAqBC,EACpCC,EAAoCC,EACpCC,GAGA,OACI,uBAAOC,KAAM,OACNrB,MAAOA,EACPgB,YAAaA,EACbC,UAAWA,EACXC,QAASA,EAAQH,KAAKlC,MAAOuC,IAAKA,EAClCE,UAAWH,EAAWJ,KAAKlC,MAC3BH,UAAW,8E,GAjJAQ,IAAMqC,WCuErBC,G,4KAvEIC,GAEX5C,KAAKC,MAAM4C,YAAYD,K,+BAUvB,OACI,qBAAK/C,UAAW,kCAAhB,SACI,wBAAOA,UAAW,SAAlB,UACI,gCACI,+BACI,oBAAIA,UAAW,eAAf,eACA,oBAAIA,UAAW,iBAAf,kBACA,oBAAIA,UAAW,iBAAf,oBACA,oBAAIA,UAAW,wBAGvB,kCACKG,KAAK8C,gBAAgB9C,KAAKC,MAAM8C,MAChC/C,KAAKgD,gC,sCASHD,GAEnB,IAAME,EAA2BjD,KAC7BkD,EAA2B,GAiB/B,OAfAH,EAAKI,SAAQ,SAAUC,EAAmBR,GACtCM,EAAMG,KACF,qBAAgBxD,UAAW,kBAA3B,UACI,oBAAIA,UAAW,sBAAf,SAAuC+C,EAAQ,IAC/C,oBAAI/C,UAAW,iBAAf,SAAkCuD,EAAQ,KAC1C,oBAAIvD,UAAW,iBAAf,SAAkCuD,EAAQ,KAC1C,oBAAIvD,UAAW,iCAAf,SACI,wBAAQA,UAAW,qBAAsBM,QAAS8C,EAAQ9C,QAAQ+B,KAAKe,EAASL,GAAhF,SACI,sBAAM/C,UAAW,eAAjB,0BANH+C,OAaVM,I,4CAMP,GAA+B,IAA3BlD,KAAKC,MAAM8C,KAAKpB,OAChB,OACI,qBAAI9B,UAAW,6BAAf,UACI,oBAAIA,UAAW,OAAf,eACA,4DACA,oE,GAvEUQ,IAAMC,gBCqHrBgD,E,kLApGgBtC,GACvB,IAAMG,EAAiBH,EAAME,cAAcqC,QAC3CvD,KAAKC,MAAMuD,oBAAoBrC,K,iDAGDH,GAC9B,IAAMG,EAAgBsC,SAASzC,EAAME,cAAcC,OACnDnB,KAAKC,MAAMyD,kBAAkBvC,K,6CAGHH,GAC1B,IAAMG,EAAgBsC,SAASzC,EAAME,cAAcC,OACnDnB,KAAKC,MAAM0D,wBAAwBxC,K,0CAGZH,GACvB,IAAMG,EAAgBH,EAAME,cAAcC,MAC1CnB,KAAKC,MAAM2D,oBAAoBzC,K,+BAS/B,OACI,eAAC,IAAM0C,SAAP,WACI,sBAAKhE,UAAW,uBAAhB,UACI,sBAAKA,UAAW,oBAAhB,UACI,yBACIA,UAAW,WAAYsB,MAAOnB,KAAKC,MAAM6D,UACzCC,SAAU/D,KAAKgE,2BAA2B9B,KAAKlC,MAFnD,UAGI,wBAAQmB,MAAO,IAAf,eACA,wBAAQA,MAAO,KAAf,gBACA,wBAAQA,MAAO,KAAf,gBACA,wBAAQA,MAAO,KAAf,gBACA,wBAAQA,MAAO,KAAf,gBACA,wBAAQA,MAAO,KAAf,gBACA,wBAAQA,MAAO,MAAf,iBACA,wBAAQA,MAAO,MAAf,oBAGJ,sBAAMtB,UAAW,kBAAjB,qCAGJ,sBAAKA,UAAW,oBAAhB,UACI,uBACI2C,KAAM,OACN3C,UAAW,sBACXsC,YAAa,IACbE,QAASrC,KAAKiE,uBAAuB/B,KAAKlC,QAG9C,sBAAMH,UAAW,kBAAjB,mCAGJ,sBAAKA,UAAW,oBAAhB,UACI,uBACI2C,KAAM,WAENuB,SAAU/D,KAAKwD,oBAAoBtB,KAAKlC,QAG5C,sBAAMH,UAAW,kBAAjB,gCAGR,sBAAKA,UAAW,4BAAhB,UACI,uBACI2C,KAAM,OACN3C,UAAW,2BACXsC,YAAa,gBACbE,QAASrC,KAAK4D,oBAAoB1B,KAAKlC,QAG3C,sBAAKH,UAAW,OAAhB,UACI,cAAC,EAAD,CACIA,UAAW,4CACXM,QAASH,KAAKC,MAAMiE,aAFxB,oBAMA,cAAC,EAAD,CACIrE,UAAW,uDACXM,QAASH,KAAKC,MAAMkE,YAFxB,oBAMA,cAAC,EAAD,CACItE,UAAW,qDACXM,QAASH,KAAKC,MAAMmE,gBAFxB,mC,GA7FM/D,IAAMC,eCpBvB+D,EAAb,WAKI,WAAYP,GACX,yBAJOQ,gBAIR,OAHiBC,gBAGjB,EACIvE,KAAKsE,WAAa,GAClBtE,KAAKuE,WAAaT,EAR1B,iDAqBgBU,GAERxE,KAAKsE,WAAWjB,KAAKmB,KAvB7B,gCAaQ,OAAOxE,KAAKsE,aAbpB,gCAkBQ,OAAOtE,KAAKuE,eAlBpB,KCFaE,EAAb,WAMI,WAAYC,EAAkBC,EAAmBC,GAChD,yBALgBC,eAKjB,OAJiBC,cAIjB,OAHiBC,qBAGjB,EACI/E,KAAK6E,UAAYH,EACjB1E,KAAK8E,SAAWH,EAChB3E,KAAK+E,gBAAkBH,EAV/B,qDAeQ,OAAO5E,KAAK6E,YAfpB,8BAoBQ,OAAO7E,KAAK8E,WApBpB,qCAyBQ,OAAO9E,KAAK+E,oBAzBpB,KCAaC,EAAb,oGAEyBC,EAAiBC,GAElC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAUD,EAAU,IAAMA,IAJrE,iCAOgCK,GAGxB,IAFA,IAAIC,EAAa,YAAOD,GAEfE,EAAYD,EAAS5D,OAAS,EAAG6D,GAAK,EAAGA,IAAK,CACnD,IAAIC,EAAsBT,EAAOU,OAAO,EAAGF,GACvCG,EAAeJ,EAASC,GAE5BD,EAASC,GAAKD,EAASE,GACvBF,EAASE,GAAeE,EAG5B,OAAOJ,MAlBf,K,gBCIaK,EAAb,0GAE+BC,GAEvB,IAAI9C,EAAO6C,EAAOE,iBAAiBD,GACnC9C,EAAKgD,QAAQ,CAAC,WAAY,WAAY,WAAY,WAAY,WAAY,aAAc,mBAExF,IAAMC,EAA0BC,IAAKC,MAAMC,WAK3C,OAHAH,EAASI,WAAW/C,KAAK,eACzB2C,EAASK,OAAO,eAAiBJ,IAAKC,MAAMI,aAAavD,GAElDiD,IAZf,uCAemCH,GAE3B,IAAIU,EAAqB,GAczB,OAZAV,EAAWW,UAAUrD,SAAQ,SAAUuB,GACnC,IAAI3B,EAAiB,GAErBA,EAAKM,KAAKqB,EAASA,WACnB3B,EAAOA,EAAK0D,OAAO/B,EAASC,UAEvBtB,KAAKwC,EAAW/B,UAAU4C,YAC/B3D,EAAKM,KAAKqB,EAASE,eAAe8B,YAElCH,EAAOlD,KAAKN,MAGTwD,MA/Bf,KCEaI,EAAb,wGAE6B5D,EAAkBe,EAAmB8C,GAE1D,IAAIf,EAAyB,IAAIxB,EAAWP,GACxC+C,EAA6B9D,EAAK+D,KAAI,SAAU1D,GAChD,OAAOA,EAAQ,MAGf2D,EAAqB,GACrBC,EAAqB7B,KAAKC,MAAMrC,EAAKpB,OAAS,IAQlD,OANAoB,EAAKI,SAAQ,SAAUC,GACnByC,EAAWxC,KAAKsD,EAAcM,qBAAqB7D,EAASyD,EAAkBE,IAC9E,IAAIG,EAAsBP,EAAcQ,YAAYJ,EAAQC,GAC5DH,EAAgB,sBAAOA,GAAP,YAA4BK,OAGzCP,EAAcS,eAAevB,EAAYe,KAlBxD,mCAqB+Bf,GAEvB,OAAOD,EAAOyB,aAAaxB,KAvBnC,2CA0BwC9C,EAAgB8D,EAA4BE,GAE5E,IAAMrC,EAAmB3B,EAAK,GAExBlC,EAAiBkC,EAAK,GACtBuE,EAAsBT,EAAiBU,QAAQ1G,GAC/C+D,EAAyBI,EAAOU,OAAO,EAAG,GAE5Cf,EAAoB,GACxBA,EAAQC,GAAkB/D,EAE1B,IAAI2G,EAAwB,GAW5B,OATqB,IAAjBF,IACAT,EAAiBY,OAAOH,EAAa,GACrCE,EAAYnE,KAAKxC,IAGrBb,KAAK0H,kBAAkB/C,EAASC,EAAgBiC,EAAkBW,GAElET,EAAO1D,KAAKmE,GAEL,IAAI/C,EAAeC,EAAUC,EAASC,EAAiB,KAhDtE,wCAoDQD,EACAC,EACAiC,EACAE,GAKA,IAFA,IAAIY,EAAW,EAEY,IAAnBhD,EAAQhD,QAAgBgG,EAAW,GAAMhD,EAAQhD,OAAS,GAAG,CAC7DgG,IAAa/C,GAAgB+C,IAEjC,IAAIlC,EAAcT,EAAOU,OAAO,EAAGmB,EAAiBlF,OAAS,GACzDiG,EAAuBf,EAAiBpB,GAE5Cd,EAAQgD,GAAYC,EACpBb,EAAO1D,KAAKuE,GACZf,EAAiBY,OAAOhC,EAAa,GAErCkC,OAtEZ,kCA0E+BZ,EAAoBC,GAE3C,IAAIE,EAAsB,GAI1B,OAFIH,EAAOpF,QAAUqF,IAAYE,EAAYH,EAAOU,OAAO,EAAG,GAAG,IAE1DP,IAhFf,qCAmFkCrB,EAAwBe,GAMlD,IALA,IAAIiB,EAA8B,GAE5BC,EAAoCjC,EAAWW,UAC/CuB,EAA0BnB,EAAmBkB,EAAgBnG,QAA+B,IAArBiF,EAA0BkB,EAAgBnG,OAASiF,EAJtC,aAOtF,IAAIoB,EAA2BD,EAAiBD,EAAgBnG,OAAUoG,EAAiBD,EAAgBnG,OACvGsG,EAAgC,IAAI5D,EAAWwB,EAAW/B,WAEfgE,EAAgBL,OAAO,EAAGO,GAElD7E,SAAQ,SAAUqB,GACrCyD,EAAkB5E,KAAKmB,MAG3BqD,EAAcxE,KAAK4E,IAVhBH,EAAgBnG,OAAS,GAAI,IAapC,OAAOkG,MAtGf,KC4EeK,G,oLAhEYtF,GACnB,IAAMoD,EAA0BhG,KAAKC,MAAMkI,cAAcvF,GACnDwF,EAAuBpI,KAAKqI,gBAAgBzF,GAElDqD,IAAKqC,UAAUtC,EAAUoC,K,sCAOLxF,GACpB,IAAMwF,EAAgBpI,KAAKC,MAAMmI,aAAa1G,OAAOC,OAAS,EAAI3B,KAAKC,MAAMmI,aAAe,oBAE5F,OAAwC,IAApCpI,KAAKC,MAAMkI,cAAcxG,OAAqByG,EAAe,QACrDA,EAAe,KAAOxF,EAAQ,GAAG8D,WAAa,U,+BAS1D,OACI,qBACI7G,UACI,sDACCG,KAAKC,MAAMsI,OAAS,yBAA2B,IAHxD,SAMI,qBAAK1I,UAAW,2BAAhB,SACI,sBAAKA,UAAW,kDAAhB,UACI,sBAAKA,UAAW,oCAAhB,UACI,oBAAIA,UAAW,oBAAf,uBACA,cAAC,EAAD,CAAQA,UAAW,iDAAkDM,QAASH,KAAKC,MAAMuI,QAAzF,uBAGJ,qBAAK3I,UAAW,OAAhB,SACKG,KAAKyI,iC,4CAS1B,IAAMxF,EAAUjD,KACZkD,EAA2B,GAW/B,OATAlD,KAAKC,MAAMkI,cAAchF,SAAQ,SAAU6C,EAAyBpD,GAChEM,EAAMG,KACF,sBAAKxD,UAAW,oCAAhB,UACI,+BAAOoD,EAAQoF,gBAAgBzF,KAC/B,cAAC,EAAD,CAAQ/C,UAAW,oDAAqDM,QAAS8C,EAAQmB,gBAAgBlC,KAAKe,EAASL,GAAvH,6BAKLM,M,GAjEuB7C,IAAMC,gBC+J7BoI,E,kDArJX,WAAYzI,GAAY,IAAD,8BACnB,cAAMA,IAEDU,MAAQ,CACToC,KAAM,GACNe,UAAW,GACX6E,aAAa,EACbC,gBAAiB,EACjBR,aAAc,GACdD,cAAe,GACfU,qBAAqB,GAVN,E,oEAmBQjI,EAAcC,GACzC,IAAIiI,EAAQ,YAAO9I,KAAKW,MAAMoC,MAC9B+F,EAASzF,KAAK,CAACzC,EAAMC,IAErBb,KAAKiB,SAAS,CAAC8B,KAAM+F,M,iDAGSlG,GAC9B,IAAIkG,EAAoB,YAAO9I,KAAKW,MAAMoC,WAElBhD,IAApB+I,EAASlG,KACTkG,EAASrB,OAAO7E,EAAO,GACvB5C,KAAKiB,SAAS,CAAC8B,KAAM+F,O,uDAIW3H,GACpCnB,KAAKiB,SAAS,CAAC6C,UAAW3C,M,yDAGYA,GACtCnB,KAAKiB,SAAS,CAAC0H,YAAaxH,M,4DAGaA,GACzCnB,KAAKiB,SAAS,CAAC2H,gBAAiBzH,M,yDAGMA,GACtCnB,KAAKiB,SAAS,CAACmH,aAAcjH,M,oDAI7BnB,KAAKiB,SAAS,CAAC8B,KAAM,O,mDAIrB,IAAI+F,EAAuB,GAE3B9I,KAAKW,MAAMoC,KAAKI,SAAQ,SAAUC,GAC9B0F,EAASzF,KAAK,CAACD,EAAQ,GAAIA,EAAQ,QAGvCpD,KAAKiB,SAAS,CAAC8B,KAAM+F,M,uDAIrB,IAAM/F,EAAmB/C,KAAKW,MAAMgI,YAAc3D,EAAO+D,WAAqB/I,KAAKW,MAAMoC,MAAQ/C,KAAKW,MAAMoC,KAE5G,GAAI/C,KAAKgJ,2BAA4B,CACjC,IAAMjB,EAAkB/H,KAAKW,MAAMiI,iBAAmB,EAAK5I,KAAKW,MAAMoC,KAAKpB,OAAS3B,KAAKW,MAAMiI,gBACzFf,EAA8BlB,EAAcsC,WAAWlG,EAAM/C,KAAKW,MAAMmD,UAAWiE,GAErFI,EAAiC,GAErCN,EAAc1E,SAAQ,SAAU0C,GAC5BsC,EAAc9E,KACVsD,EAAcU,aAAaxB,OAInC7F,KAAKiB,SAAS,CACVkH,cAAeA,EACfU,qBAAqB,SAGzBrH,MAAM,8D,4DAKVxB,KAAKiB,SAAS,CAAC4H,qBAAqB,M,iDASpC,OAAO7I,KAAKW,MAAMoC,KAAKpB,QAAU,I,+BAQjC,OACI,eAAC,IAAMkC,SAAP,WACI,wBAAQhE,UAAW,QAAnB,SACI,oBAAIA,UAAW,4CAAf,iCAGJ,sBAAKA,UAAW,wBAAhB,UACI,cAAC,EAAD,CAAiBwB,SAAUrB,KAAKkJ,wBAAwBhH,KAAKlC,QAE7D,qBAAKH,UAAW,OAAhB,SACI,cAAC,EAAD,CACIiE,UAAW9D,KAAKW,MAAMmD,UACtB6E,YAAa3I,KAAKW,MAAMgI,YACxBjF,kBAAmB1D,KAAKmJ,iCAAiCjH,KAAKlC,MAC9DwD,oBAAqBxD,KAAKoJ,mCAAmClH,KAAKlC,MAClE2D,wBAAyB3D,KAAKqJ,sCAAsCnH,KAAKlC,MACzE4D,oBAAqB5D,KAAKsJ,mCAAmCpH,KAAKlC,MAClEkE,aAAclE,KAAKuJ,4BAA4BrH,KAAKlC,MACpDmE,YAAanE,KAAKwJ,2BAA2BtH,KAAKlC,MAClDoE,gBAAiBpE,KAAKyJ,+BAA+BvH,KAAKlC,UAIlE,qBAAKH,UAAW,OAAhB,SACI,cAAC,EAAD,CACIkD,KAAM/C,KAAKW,MAAMoC,KACjBF,YAAa7C,KAAK0J,2BAA2BxH,KAAKlC,aAK9D,cAAC,EAAD,CACIuI,OAAQvI,KAAKW,MAAMkI,oBACnBT,aAAcpI,KAAKW,MAAMyH,aACzBD,cAAenI,KAAKW,MAAMwH,cAC1BK,QAASxI,KAAK2J,oCAAoCzH,KAAKlC,e,GA/I5CK,IAAMqC,WCVtBkH,E,uKAJP,OAAQ,cAAC,EAAD,Q,GAJEvJ,IAAMqC,WCUTmH,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d3721f77.chunk.js","sourcesContent":["export class Keyboard\n{\n    public static readonly ENTER: string = 'Enter';\n    public static readonly TAB: string = 'Tab';\n}","import React from 'react';\n\ninterface Props\n{\n    className?: string;\n    onClick(): void;\n}\n\nclass Button extends React.PureComponent<Props>\n{\n    private static readonly DEFAULT_CLASS_NAME: string = \"h-10 text-lg border-b-2\"\n\n    public getClassName(): string\n    {\n        let className: string = Button.DEFAULT_CLASS_NAME;\n        if (this.props.className !== undefined) className+= ' ' + this.props.className;\n\n        return className;\n    }\n\n    public render(): React.ReactNode\n    {\n        return (\n            <button className={this.getClassName()} onClick={this.props.onClick}>{this.props.children}</button>\n        )\n    }\n}\n\nexport default Button;","import React from 'react';\nimport {Keyboard} from \"../../../static/Keyboard\";\nimport {OnInput, OnKeyPress} from \"../../../interfaces/Events\";\nimport Button from '../../ui/button/Button';\n\ninterface Props\n{\n    onSubmit(term: string, answer: string): void;\n}\n\ninterface State\n{\n    term: string;\n    answer: string;\n}\n\nclass VocabularyInput extends React.Component<Props, State>\n{\n    private readonly termRef: React.RefObject<HTMLInputElement>;\n    private readonly answerRef: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props)\n    {\n        super(props);\n\n        this.termRef = React.createRef();\n        this.answerRef = React.createRef();\n\n        this.state = {\n            term: '',\n            answer: ''\n        };\n    }\n\n    /*----------------------------------------\n    |   Component event methods\n    *----------------------------------------*/\n\n    public componentDidMount(): void\n    {\n        this.termRef.current?.focus();\n    }\n\n\n    /*----------------------------------------\n    |   OnInput event methods\n    *----------------------------------------*/\n\n    public onInputTerm(event: React.FormEvent<HTMLInputElement>): void\n    {\n        this.setState({term: event.currentTarget.value});\n    }\n\n    public onInputAnswer(event: React.FormEvent<HTMLInputElement>): void\n    {\n        this.setState({answer: event.currentTarget.value});\n    }\n\n\n    /*----------------------------------------\n    |   OnKeyPress event methods\n    *----------------------------------------*/\n\n    public onKeyDownTerm(event: React.KeyboardEvent<HTMLInputElement>): void\n    {\n        if (event.key === Keyboard.ENTER) this.answerRef.current?.focus();\n    }\n\n    public onKeyDownAnswer(event: React.KeyboardEvent<HTMLInputElement>): void\n    {\n        if (event.key === Keyboard.ENTER || event.key === Keyboard.TAB) this.onSubmit();\n    }\n\n\n    /*----------------------------------------\n    |   OnSubmit methods\n    *----------------------------------------*/\n\n    private onSubmit(): void\n    {\n        if (this.inputValuesAreValid()) {\n            this.clearState();\n\n            this.termRef.current?.focus();\n            this.props.onSubmit(this.state.term, this.state.answer);\n        } else {\n            alert('Fill in both fields');\n        }\n    }\n\n    /*----------------------------------------\n    |   Validate methods\n    *----------------------------------------*/\n\n    public inputValuesAreValid(): boolean\n    {\n        let termLength: number = this.state.term.trim().length;\n        let answerLength: number = this.state.answer.trim().length;\n\n        return (termLength > 0 && answerLength > 0);\n    }\n\n\n    /*----------------------------------------\n    |   Data methods\n    *----------------------------------------*/\n\n    public clearState(): void\n    {\n        this.setState({\n            term: '',\n            answer: ''\n        });\n    }\n\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): React.ReactNode\n    {\n        return (\n            <div className={\"w-full flex items-center border-white border-b-2 pb-1\"}>\n                {this.renderInput(\n                    this.state.term, 'Term', 120,\n                    this.onInputTerm, this.onKeyDownTerm,\n                    this.termRef\n                )}\n\n                <span className={\"text-lg text-white\"}>&rarr;</span>\n\n                {this.renderInput(\n                    this.state.answer, 'Answer', 75,\n                    this.onInputAnswer, this.onKeyDownAnswer,\n                    this.answerRef\n                )}\n\n                <Button\n                    className={\"w-10 text-white font-bold bg-blue-300 border-blue-400\"}\n                    onClick={this.onSubmit.bind(this)}>\n                    +\n                </Button>\n            </div>\n        );\n    }\n\n    public renderInput\n    (\n        value: string, placeholder: string, maxLength: number,\n        onInput: OnInput<HTMLInputElement>, onKeyPress: OnKeyPress<HTMLInputElement>,\n        ref: React.RefObject<HTMLInputElement>\n    ): React.ReactNode\n    {\n        return (\n            <input type={\"text\"}\n                   value={value}\n                   placeholder={placeholder}\n                   maxLength={maxLength}\n                   onInput={onInput.bind(this)} ref={ref}\n                   onKeyDown={onKeyPress.bind(this)}\n                   className={\"flex-grow text-white bg-transparent p-1 box-border focus:outline-none\"}\n            />\n        );\n    }\n}\n\nexport default VocabularyInput;","import React from 'react';\nimport './VocabularyTable.css';\n\ninterface Props\n{\n    data: string[][];\n\n    onRemoveRow(index: number): void\n}\n\nclass VocabularyTable extends React.PureComponent<Props>\n{\n    /*----------------------------------------\n    |   OnClick event methods\n    *----------------------------------------*/\n\n    public onClick(index: number): void\n    {\n        this.props.onRemoveRow(index);\n    }\n\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): React.ReactNode\n    {\n        return (\n            <div className={\"p-2 box-border bg-white rounded\"}>\n                <table className={\"w-full\"}>\n                    <thead>\n                        <tr>\n                            <th className={\"text-sm pl-1\"}>#</th>\n                            <th className={\"w-5/12 text-sm\"}>Term</th>\n                            <th className={\"w-5/12 text-sm\"}>Answer</th>\n                            <th className={\"w-1/12 text-sm\"}></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.renderTableBody(this.props.data)}\n                        {this.renderNoDataMessage()}\n                    </tbody>\n                </table>\n\n\n            </div>\n        )\n    }\n\n    public renderTableBody(data: string[][]): React.ReactNode[]\n    {\n        const context: VocabularyTable = this;\n        let nodes: React.ReactNode[] = [];\n\n        data.forEach(function (element: string[], index: number) {\n            nodes.push((\n                <tr key={index} className={\"odd:bg-gray-200\"}>\n                    <td className={\"w-1/12 text-sm pl-1\"}>{index + 1}</td>\n                    <td className={\"w-5/12 text-sm\"}>{element[0]}</td>\n                    <td className={\"w-5/12 text-sm\"}>{element[1]}</td>\n                    <td className={\"w-1/12 text-sm text-right pr-1\"}>\n                        <button className={\"focus:outline-none\"} onClick={context.onClick.bind(context, index)}>\n                            <span className={\"text-red-300\"}>&#10006;</span>\n                        </button>\n                    </td>\n                </tr>\n            ));\n        });\n\n        return nodes;\n    }\n\n    public renderNoDataMessage(): React.ReactNode | void\n    {\n\n        if (this.props.data.length === 0)\n            return (\n                <tr className={\"mt-1 text-sm text-gray-500\"}>\n                    <td className={\"pl-1\"}>1</td>\n                    <td>Lorem ipsum dolor sit amet</td>\n                    <td>consectetur adipiscing elit</td>\n                </tr>\n            );\n    }\n}\n\nexport default VocabularyTable;","import React from 'react';\nimport Button from '../../ui/button/Button';\n\ninterface Props {\n    timeLimit: number;\n    randomOrder: boolean;\n\n    onChangeTimeLimit(value: number): void;\n\n    onChangeRandomOrder(value: boolean): void;\n\n    onInputQuestionsPerQuiz(value: number): void;\n\n    onInputDocumentName(value: string): void;\n\n    onClickClear(): void;\n\n    onClickSwap(): void;\n\n    onClickDownload(): void;\n}\n\nclass VocabularyTools extends React.PureComponent<Props> {\n    /*----------------------------------------\n    |   OnEvent methods\n    *----------------------------------------*/\n\n    public onChangeRandomOrder(event: React.FormEvent<HTMLInputElement>): void {\n        const value: boolean = event.currentTarget.checked;\n        this.props.onChangeRandomOrder(value);\n    }\n\n    public onChangeSecondsPerQuestion(event: React.FormEvent<HTMLSelectElement>): void {\n        const value: number = parseInt(event.currentTarget.value);\n        this.props.onChangeTimeLimit(value);\n    }\n\n    public onInputQuestionPerQuiz(event: React.FormEvent<HTMLInputElement>): void {\n        const value: number = parseInt(event.currentTarget.value);\n        this.props.onInputQuestionsPerQuiz(value);\n    }\n\n    public onInputDocumentName(event: React.FormEvent<HTMLInputElement>): void {\n        const value: string = event.currentTarget.value;\n        this.props.onInputDocumentName(value);\n    }\n\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): React.ReactNode {\n        return (\n            <React.Fragment>\n                <div className={\"flex justify-between\"}>\n                    <div className={\"flex items-center\"}>\n                        <select\n                            className={\"w-12 h-8\"} value={this.props.timeLimit}\n                            onChange={this.onChangeSecondsPerQuestion.bind(this)}>\n                            <option value={\"5\"}>5</option>\n                            <option value={\"10\"}>10</option>\n                            <option value={\"20\"}>20</option>\n                            <option value={\"30\"}>30</option>\n                            <option value={\"60\"}>60</option>\n                            <option value={\"90\"}>90</option>\n                            <option value={\"120\"}>120</option>\n                            <option value={\"240\"}>240</option>\n                        </select>\n\n                        <span className={\"text-white ml-2\"}>seconds per question</span>\n                    </div>\n\n                    <div className={\"flex items-center\"}>\n                        <input\n                            type={\"text\"}\n                            className={\"w-12 p-2 box-border\"}\n                            placeholder={\"0\"}\n                            onInput={this.onInputQuestionPerQuiz.bind(this)}\n                        />\n\n                        <span className={\"text-white ml-2\"}>questions per quiz</span>\n                    </div>\n\n                    <div className={\"flex items-center\"}>\n                        <input\n                            type={\"checkbox\"}\n\n                            onChange={this.onChangeRandomOrder.bind(this)}\n                        />\n\n                        <span className={\"text-white ml-2\"}>Random order</span>\n                    </div>\n                </div>\n                <div className={\"flex justify-between mt-2\"}>\n                    <input\n                        type={\"text\"}\n                        className={\"flex-grow p-2 box-border\"}\n                        placeholder={\"Document name\"}\n                        onInput={this.onInputDocumentName.bind(this)}\n                    />\n\n                    <div className={\"ml-2\"}>\n                        <Button\n                            className={\"w-10 text-white bg-red-300 border-red-400\"}\n                            onClick={this.props.onClickClear}>\n                            &#8634;\n                        </Button>\n\n                        <Button\n                            className={\"w-10 text-white bg-yellow-300 border-yellow-400 ml-2\"}\n                            onClick={this.props.onClickSwap}>\n                            &#8646;\n                        </Button>\n\n                        <Button\n                            className={\"w-24 text-white bg-green-300 border-green-400 ml-2\"}\n                            onClick={this.props.onClickDownload}>\n                            Download\n                        </Button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default VocabularyTools;","import {KahootQuestion} from './KahootQuestion';\n\nexport class KahootQuiz\n{\n    private _questions: KahootQuestion[];\n    private readonly _timeLimit: number;\n\n    constructor(timeLimit: number)\n    {\n        this._questions = [];\n        this._timeLimit = timeLimit;\n    }\n\n    get questions(): KahootQuestion[]\n    {\n        return this._questions;\n    }\n\n    get timeLimit(): number\n    {\n        return this._timeLimit;\n    }\n\n    public push(kahootQuestion: KahootQuestion): void\n    {\n        this._questions.push(kahootQuestion);\n    }\n}","export class KahootQuestion\n{\n    private readonly _question: string;\n    private readonly _answers: string[];\n    private readonly _answerPosition: number;\n\n    constructor(question: string, answers: string[], answerPosition: number)\n    {\n        this._question = question;\n        this._answers = answers;\n        this._answerPosition = answerPosition;\n    }\n\n    get question(): string\n    {\n        return this._question;\n    }\n\n    get answers(): string[]\n    {\n        return this._answers;\n    }\n\n    get answerPosition(): number\n    {\n        return this._answerPosition;\n    }\n}","export class Random\n{\n    public static number(minimum: number, maximum: number): number\n    {\n        return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n    }\n\n    public static arrayOrder<T>(array: T[]): T[] {\n        let newArray: T[] = [...array];\n\n        for (let i: number = newArray.length - 1; i >= 0; i--) {\n            let randomIndex: number = Random.number(0, i);\n            let temporary: T = newArray[i];\n\n            newArray[i] = newArray[randomIndex];\n            newArray[randomIndex] = temporary;\n        }\n\n        return newArray;\n    }\n}","import XLSX from 'xlsx';\nimport {KahootQuiz} from '../models/KahootQuiz';\nimport {KahootQuestion} from '../models/KahootQuestion';\n\nexport class Kahoot\n{\n    public static exportToXLSX(kahootQuiz: KahootQuiz): XLSX.WorkBook\n    {\n        let data = Kahoot.quizToXLSXFormat(kahootQuiz);\n        data.unshift(['Question', 'Answer 1', 'Answer 2', 'Answer 3', 'Answer 4', 'Time limit', 'Correct answer']);\n\n        const workbook: XLSX.WorkBook = XLSX.utils.book_new();\n\n        workbook.SheetNames.push('Kahoot quiz');\n        workbook.Sheets['Kahoot quiz'] = XLSX.utils.aoa_to_sheet(data);\n\n        return workbook;\n    }\n\n    public static quizToXLSXFormat(kahootQuiz: KahootQuiz): string[][]\n    {\n        let result: string[][] = [];\n\n        kahootQuiz.questions.forEach(function (question: KahootQuestion) {\n            let data: string[] = [];\n\n            data.push(question.question)\n            data = data.concat(question.answers);\n\n            data.push(kahootQuiz.timeLimit.toString());\n            data.push(question.answerPosition.toString());\n\n            result.push(data);\n        });\n\n        return result;\n    }\n}","import XLSX from 'xlsx';\nimport {KahootQuiz} from '../models/KahootQuiz';\nimport {KahootQuestion} from '../models/KahootQuestion';\nimport {Random} from '../helpers/Random';\nimport {Kahoot} from '../helpers/Kahoot';\n\nexport class KahootService\n{\n    public static createQuiz(data: string[][], timeLimit: number, questionsPerQuiz: number): KahootQuiz[]\n    {\n        let kahootQuiz: KahootQuiz = new KahootQuiz(timeLimit);\n        let availableAnswers: string[] = data.map(function (element: string[]): string {\n            return element[1];\n        });\n\n        let buffer: string[][] = [];\n        let bufferSize: number = Math.floor(data.length / 16);\n\n        data.forEach(function (element: string[]) {\n            kahootQuiz.push(KahootService.createSingleQuestion(element, availableAnswers, buffer));\n            let toRecover: string[] = KahootService.shiftBuffer(buffer, bufferSize);\n            availableAnswers = [...availableAnswers, ...toRecover];\n        });\n\n        return KahootService.segmentizeQuiz(kahootQuiz, questionsPerQuiz);\n    }\n\n    public static exportToXLSX(kahootQuiz: KahootQuiz): XLSX.WorkBook\n    {\n        return Kahoot.exportToXLSX(kahootQuiz);\n    }\n\n    private static createSingleQuestion(data: string[], availableAnswers: string[], buffer: string[][]): KahootQuestion\n    {\n        const question: string = data[0];\n\n        const answer: string = data[1];\n        const answerIndex: number = availableAnswers.indexOf(answer);\n        const answerPosition: number = Random.number(0, 3);\n\n        let answers: string[] = [];\n        answers[answerPosition] = answer;\n\n        let addToBuffer: string[] = [];\n\n        if (answerIndex !== -1) {\n            availableAnswers.splice(answerIndex, 1);\n            addToBuffer.push(answer);\n        }\n\n        this.pickRandomAnswers(answers, answerPosition, availableAnswers, addToBuffer);\n\n        buffer.push(addToBuffer);\n\n        return new KahootQuestion(question, answers, answerPosition + 1);\n    }\n\n    private static pickRandomAnswers(\n        answers: string[],\n        answerPosition: number,\n        availableAnswers: string[],\n        buffer: string[]\n    ): void\n    {\n        let position = 0;\n\n        while ((answers.length === 4 && position < 3) || answers.length < 4) {\n            if (position === answerPosition) position++;\n\n            let randomIndex = Random.number(0, availableAnswers.length - 1);\n            let randomAnswer: string = availableAnswers[randomIndex];\n\n            answers[position] = randomAnswer;\n            buffer.push(randomAnswer);\n            availableAnswers.splice(randomIndex, 1);\n\n            position++;\n        }\n    }\n\n    private static shiftBuffer(buffer: string[][], bufferSize: number): string[]\n    {\n        let toRecover: string[] = [];\n\n        if (buffer.length >= bufferSize) toRecover = buffer.splice(0, 1)[0];\n\n        return toRecover;\n    }\n\n    private static segmentizeQuiz(kahootQuiz: KahootQuiz, questionsPerQuiz: number): KahootQuiz[] {\n        let kahootQuizzes: KahootQuiz[] = [];\n\n        const kahootQuestions: KahootQuestion[] = kahootQuiz.questions;\n        const kahootQuizSize: number = (questionsPerQuiz > kahootQuestions.length || questionsPerQuiz === 0) ? kahootQuestions.length : questionsPerQuiz;\n\n        while (kahootQuestions.length > 0) {\n            let currentQuizSize: number = (kahootQuizSize < kahootQuestions.length) ? kahootQuizSize : kahootQuestions.length;\n            let currentKahootQuiz: KahootQuiz = new KahootQuiz(kahootQuiz.timeLimit);\n\n            let currentKahootQuestions: KahootQuestion[] = kahootQuestions.splice(0, currentQuizSize);\n\n            currentKahootQuestions.forEach(function (kahootQuestion: KahootQuestion) {\n                currentKahootQuiz.push(kahootQuestion)\n            });\n\n            kahootQuizzes.push(currentKahootQuiz);\n        }\n\n        return kahootQuizzes;\n    }\n}","import React from 'react';\nimport XLSX from 'xlsx';\nimport './VocabularyDownloadPopup.css';\nimport Button from \"../../ui/button/Button\";\n\ninterface Props {\n    hidden: boolean;\n    documentName: string;\n    downloadables: XLSX.WorkBook[];\n\n    onClose(): void;\n}\n\nclass VocabularyDownloadPopup extends React.PureComponent<Props> {\n    /*----------------------------------------\n    |   OnClick methods\n    *----------------------------------------*/\n\n    public onClickDownload(index: number): void {\n        const workbook: XLSX.WorkBook = this.props.downloadables[index];\n        const documentName: string = this.getDocumentName(index);\n\n        XLSX.writeFile(workbook, documentName);\n    }\n\n    /*----------------------------------------\n    |   Data methods\n    *----------------------------------------*/\n\n    private getDocumentName(index: number): string {\n        const documentName = (this.props.documentName.trim().length > 0 ? this.props.documentName : \"Vocabulary2Kahoot\");\n\n        if (this.props.downloadables.length === 1) return documentName + \".xlsx\";\n        else return documentName + \" \" + (index + 1).toString() + \".xlsx\";\n    }\n\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): React.ReactNode {\n        return (\n            <div\n                className={\n                    \"w-full h-full fixed inset-0 download-popup-overlay\" +\n                    (this.props.hidden ? \" download-popup-hidden\" : \"\")\n                }\n            >\n                <div className={\"flex justify-center mt-4\"}>\n                    <div className={\"w-full max-w-md bg-white rounded p-2 box-border\"}>\n                        <div className={\"flex justify-between items-center\"}>\n                            <h2 className={\"text-xl font-bold\"}>Downloads</h2>\n                            <Button className={\"w-10 h-10 text-white bg-red-300 border-red-400\"} onClick={this.props.onClose}>&#9932;</Button>\n                        </div>\n\n                        <div className={\"mt-2\"}>\n                            {this.renderDownloadables()}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    public renderDownloadables(): React.ReactNode[] {\n        const context = this;\n        let nodes: React.ReactNode[] = [];\n\n        this.props.downloadables.forEach(function (workbook: XLSX.WorkBook, index: number) {\n            nodes.push(\n                <div className={\"flex justify-between items-center\"}>\n                    <span>{context.getDocumentName(index)}</span>\n                    <Button className={\"h-8 w-24 text-white bg-green-300 border-green-400\"} onClick={context.onClickDownload.bind(context, index)}>Download</Button>\n                </div>\n            )\n        });\n\n        return nodes;\n    }\n}\n\nexport default VocabularyDownloadPopup;","import React, {ReactNode} from 'react';\nimport XLSX from 'xlsx';\n\nimport VocabularyInput from \"./vocabulary-input/VocabularyInput\";\nimport VocabularyTable from './vocbulary-table/VocabularyTable';\nimport VocabularyTools from './vocabulary-tools/VocabularyTools';\n\nimport {KahootService} from '../../services/KahootService';\nimport {KahootQuiz} from '../../models/KahootQuiz';\nimport VocabularyDownloadPopup from \"./vocabulary-download-popup/VocabularyDownloadPopup\";\nimport {Random} from \"../../helpers/Random\";\n\ninterface State {\n    data: string[][];\n    timeLimit: number;\n    randomOrder: boolean;\n    questionPerQuiz: number;\n    documentName: string;\n    downloadables: XLSX.WorkBook[];\n    downloadPopupHidden: boolean;\n}\n\nclass VocabularyScreen extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            data: [],\n            timeLimit: 20,\n            randomOrder: false,\n            questionPerQuiz: 0,\n            documentName: '',\n            downloadables: [],\n            downloadPopupHidden: true\n        }\n    }\n\n\n    /*----------------------------------------\n    |   Component event methods\n    *----------------------------------------*/\n\n    public onSubmitVocabularyInput(term: string, answer: string): void {\n        let newState = [...this.state.data];\n        newState.push([term, answer]);\n\n        this.setState({data: newState});\n    }\n\n    public onRemoveRowVocabularyTable(index: number): void {\n        let newState: string[][] = [...this.state.data];\n\n        if (newState[index] !== undefined) {\n            newState.splice(index, 1);\n            this.setState({data: newState})\n        }\n    }\n\n    public onChangeTimeLimitVocabularyTools(value: number): void {\n        this.setState({timeLimit: value});\n    }\n\n    public onChangeRandomOrderVocabularyTools(value: boolean): void {\n        this.setState({randomOrder: value});\n    }\n\n    public onInputQuestionPerQuizVocabularyTools(value: number): void {\n        this.setState({questionPerQuiz: value});\n    }\n\n    public onInputDocumentNameVocabularyTools(value: string): void {\n        this.setState({documentName: value});\n    }\n\n    public onClickClearVocabularyTools(): void {\n        this.setState({data: []})\n    }\n\n    public onClickSwapVocabubaryTools(): void {\n        let newState: string[][] = [];\n\n        this.state.data.forEach(function (element: string[]) {\n            newState.push([element[1], element[0]]);\n        });\n\n        this.setState({data: newState});\n    }\n\n    public onClickDownloadVocabularyTools(): void {\n        const data: string[][] = this.state.randomOrder ? Random.arrayOrder<string[]>(this.state.data) : this.state.data;\n\n        if (this.dataHasFourOrMoreEntries()) {\n            const kahootQuizSize = (this.state.questionPerQuiz <= 0) ? this.state.data.length : this.state.questionPerQuiz;\n            const kahootQuizzes: KahootQuiz[] = KahootService.createQuiz(data, this.state.timeLimit, kahootQuizSize);\n\n            let downloadables: XLSX.WorkBook[] = [];\n\n            kahootQuizzes.forEach(function (kahootQuiz: KahootQuiz) {\n                downloadables.push(\n                    KahootService.exportToXLSX(kahootQuiz)\n                );\n            });\n\n            this.setState({\n                downloadables: downloadables,\n                downloadPopupHidden: false\n            });\n        } else {\n            alert('At least four terms are required to create a Kahoot quiz');\n        }\n    }\n\n    public onClickCloseVocabularyDownloadPopup(): void {\n        this.setState({downloadPopupHidden: true});\n    }\n\n\n    /*----------------------------------------\n    |   Validate methods\n    *----------------------------------------*/\n\n    public dataHasFourOrMoreEntries(): boolean {\n        return this.state.data.length >= 4;\n    }\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): ReactNode {\n        return (\n            <React.Fragment>\n                <header className={\"mt-10\"}>\n                    <h1 className={\"text-2xl text-white text-center font-bold\"}>Vocabulary2Kahoot</h1>\n                </header>\n\n                <div className={\"max-w-xl mx-auto mt-3\"}>\n                    <VocabularyInput onSubmit={this.onSubmitVocabularyInput.bind(this)}/>\n\n                    <div className={\"mt-3\"}>\n                        <VocabularyTools\n                            timeLimit={this.state.timeLimit}\n                            randomOrder={this.state.randomOrder}\n                            onChangeTimeLimit={this.onChangeTimeLimitVocabularyTools.bind(this)}\n                            onChangeRandomOrder={this.onChangeRandomOrderVocabularyTools.bind(this)}\n                            onInputQuestionsPerQuiz={this.onInputQuestionPerQuizVocabularyTools.bind(this)}\n                            onInputDocumentName={this.onInputDocumentNameVocabularyTools.bind(this)}\n                            onClickClear={this.onClickClearVocabularyTools.bind(this)}\n                            onClickSwap={this.onClickSwapVocabubaryTools.bind(this)}\n                            onClickDownload={this.onClickDownloadVocabularyTools.bind(this)}\n                        />\n                    </div>\n\n                    <div className={\"mt-3\"}>\n                        <VocabularyTable\n                            data={this.state.data}\n                            onRemoveRow={this.onRemoveRowVocabularyTable.bind(this)}\n                        />\n                    </div>\n                </div>\n\n                <VocabularyDownloadPopup\n                    hidden={this.state.downloadPopupHidden}\n                    documentName={this.state.documentName}\n                    downloadables={this.state.downloadables}\n                    onClose={this.onClickCloseVocabularyDownloadPopup.bind(this)}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default VocabularyScreen;","import React from 'react';\nimport './App.css';\nimport VocabularyScreen from \"./components/vocabulary-screen/VocabularyScreen\";\n\nclass App extends React.Component\n{\n    public render(): React.ReactNode\n    {\n        return (<VocabularyScreen/>);\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/tailwind.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}