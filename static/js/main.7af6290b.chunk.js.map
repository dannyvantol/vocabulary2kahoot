{"version":3,"sources":["helpers/Keyboard.ts","components/ui/Button.tsx","components/vocabulary/VocabularyInput.tsx","components/vocabulary/VocabularyTable.tsx","components/vocabulary/VocabularyTools.tsx","models/KahootQuiz.ts","models/KahootQuestion.ts","helpers/Random.ts","helpers/Kahoot.ts","services/KahootService.ts","components/vocabulary/VocabularyScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Keyboard","ENTER","TAB","Button","className","DEFAULT_CLASS_NAME","undefined","this","props","getClassName","onClick","children","React","PureComponent","VocabularyInput","termRef","answerRef","createRef","state","term","answer","current","focus","event","setState","currentTarget","value","key","onSubmit","inputValuesAreValid","clearState","alert","termLength","trim","length","answerLength","renderInput","onInputTerm","onKeyPressTerm","onInputAnswer","onKeyPressAnswer","bind","placeholder","maxLength","onInput","onKeyPress","ref","type","Component","VocabularyTable","index","onRemoveRow","renderTableBody","data","renderNoDataMessage","context","nodes","forEach","element","push","VocabularyTools","parseInt","onChangeTimeLimit","onChange","onClickClear","onClickSwap","onClickDownload","KahootQuiz","timeLimit","_questions","_timeLimit","kahootQuestion","KahootQuestion","question","answers","answerPosition","_question","_answers","_answerPosition","Random","minimum","maximum","Math","floor","random","Kahoot","kahootQuiz","quizToXLSXFormat","unshift","workbook","XLSX","utils","book_new","SheetNames","Sheets","aoa_to_sheet","result","questions","concat","toString","KahootService","availableAnswers","map","buffer","bufferSize","createSingleQuestion","toRecover","shiftBuffer","exportToXLSX","answerIndex","indexOf","number","addToBuffer","splice","pickRandomAnswers","position","randomIndex","randomAnswer","VocabularyScreen","newState","dataHasFourOrMoreEntries","createQuiz","xlsx","writeFile","Fragment","onSubmitVocabularyInput","onChangeTimeLimitVocabularyTools","onClickClearVocabularyTools","onClickSwapVocabubaryTools","onClickDownloadVocabularyTools","onRemoveRowVocabularyTable","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7af6290b.chunk.js","sourcesContent":["export class Keyboard\n{\n    public static readonly ENTER: string = 'Enter';\n    public static readonly TAB: string = 'Tab';\n}","import React from 'react';\n\ninterface Props\n{\n    className?: string;\n    onClick(): void;\n}\n\nclass Button extends React.PureComponent<Props>\n{\n    private static readonly DEFAULT_CLASS_NAME: string = \"h-10 text-lg border-b-2\"\n\n    public getClassName(): string\n    {\n        let className: string = Button.DEFAULT_CLASS_NAME;\n        if (this.props.className !== undefined) className+= ' ' + this.props.className;\n\n        return className;\n    }\n\n    public render(): React.ReactNode\n    {\n        return (\n            <button className={this.getClassName()} onClick={this.props.onClick}>{this.props.children}</button>\n        )\n    }\n}\n\nexport default Button;","import React from 'react';\nimport {Keyboard} from \"../../helpers/Keyboard\";\nimport {OnInput, OnKeyPress} from \"../../interfaces/Events\";\nimport Button from '../ui/Button';\n\ninterface Props\n{\n    onSubmit(term: string, answer: string): void;\n}\n\ninterface State\n{\n    term: string;\n    answer: string;\n}\n\nclass VocabularyInput extends React.Component<Props, State>\n{\n    private readonly termRef: React.RefObject<HTMLInputElement>;\n    private readonly answerRef: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props)\n    {\n        super(props);\n\n        this.termRef = React.createRef();\n        this.answerRef = React.createRef();\n\n        this.state = {\n            term: '',\n            answer: ''\n        };\n    }\n\n    /*----------------------------------------\n    |   Component event methods\n    *----------------------------------------*/\n\n    public componentDidMount(): void\n    {\n        this.termRef.current?.focus();\n    }\n\n\n    /*----------------------------------------\n    |   OnInput event methods\n    *----------------------------------------*/\n\n    public onInputTerm(event: React.FormEvent<HTMLInputElement>): void\n    {\n        this.setState({term: event.currentTarget.value});\n    }\n\n    public onInputAnswer(event: React.FormEvent<HTMLInputElement>): void\n    {\n        this.setState({answer: event.currentTarget.value});\n    }\n\n\n    /*----------------------------------------\n    |   OnKeyPress event methods\n    *----------------------------------------*/\n\n    public onKeyPressTerm(event: React.KeyboardEvent<HTMLInputElement>): void\n    {\n        if (event.key === Keyboard.ENTER) this.answerRef.current?.focus();\n    }\n\n    public onKeyPressAnswer(event: React.KeyboardEvent<HTMLInputElement>): void\n    {\n        if (event.key === Keyboard.ENTER || event.key === Keyboard.TAB) this.onSubmit();\n    }\n\n\n    /*----------------------------------------\n    |   OnSubmit methods\n    *----------------------------------------*/\n\n    private onSubmit(): void\n    {\n        if (this.inputValuesAreValid()) {\n            this.clearState();\n\n            this.termRef.current?.focus();\n            this.props.onSubmit(this.state.term, this.state.answer);\n        } else {\n            alert('Fill in both fields');\n        }\n    }\n\n    /*----------------------------------------\n    |   Validate methods\n    *----------------------------------------*/\n\n    public inputValuesAreValid(): boolean\n    {\n        let termLength: number = this.state.term.trim().length;\n        let answerLength: number = this.state.answer.trim().length;\n\n        return (termLength > 0 && answerLength > 0);\n    }\n\n\n    /*----------------------------------------\n    |   Data methods\n    *----------------------------------------*/\n\n    public clearState(): void\n    {\n        this.setState({\n            term: '',\n            answer: ''\n        });\n    }\n\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): React.ReactNode\n    {\n        return (\n            <div className={\"w-full flex items-center border-white border-b-2 pb-1\"}>\n                {this.renderInput(\n                    this.state.term, 'Term', 120,\n                    this.onInputTerm, this.onKeyPressTerm,\n                    this.termRef\n                )}\n\n                <span className={\"text-lg text-white\"}>&rarr;</span>\n\n                {this.renderInput(\n                    this.state.answer, 'Answer', 75,\n                    this.onInputAnswer, this.onKeyPressAnswer,\n                    this.answerRef\n                )}\n\n                <Button\n                    className={\"w-10 text-white font-bold bg-blue-300 border-blue-400\"}\n                    onClick={this.onSubmit.bind(this)}>\n                    +\n                </Button>\n            </div>\n        );\n    }\n\n    public renderInput\n    (\n        value: string, placeholder: string, maxLength: number,\n        onInput: OnInput<HTMLInputElement>, onKeyPress: OnKeyPress<HTMLInputElement>,\n        ref: React.RefObject<HTMLInputElement>\n    ): React.ReactNode\n    {\n        return (\n            <input type={\"text\"}\n                   value={value}\n                   placeholder={placeholder}\n                   maxLength={maxLength}\n                   onInput={onInput.bind(this)} ref={ref}\n                   onKeyPress={onKeyPress.bind(this)}\n                   className={\"flex-grow text-white bg-transparent p-1 box-border focus:outline-none\"}\n            />\n        );\n    }\n}\n\nexport default VocabularyInput;","import React from 'react';\nimport './VocabularyTable.css';\n\ninterface Props\n{\n    data: string[][];\n\n    onRemoveRow(index: number): void\n}\n\nclass VocabularyTable extends React.PureComponent<Props>\n{\n    /*----------------------------------------\n    |   OnClick event methods\n    *----------------------------------------*/\n\n    public onClick(index: number): void\n    {\n        this.props.onRemoveRow(index);\n    }\n\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): React.ReactNode\n    {\n        return (\n            <div className={\"p-2 box-border bg-white rounded\"}>\n                <table className={\"w-full\"}>\n                    <thead>\n                        <tr>\n                            <th className={\"text-sm pl-1\"}>#</th>\n                            <th className={\"w-5/12 text-sm\"}>Term</th>\n                            <th className={\"w-5/12 text-sm\"}>Answer</th>\n                            <th className={\"w-1/12 text-sm\"}></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.renderTableBody(this.props.data)}\n                        {this.renderNoDataMessage()}\n                    </tbody>\n                </table>\n\n\n            </div>\n        )\n    }\n\n    public renderTableBody(data: string[][]): React.ReactNode[]\n    {\n        const context: VocabularyTable = this;\n        let nodes: React.ReactNode[] = [];\n\n        data.forEach(function (element: string[], index: number) {\n            nodes.push((\n                <tr key={index} className={\"odd:bg-gray-200\"}>\n                    <td className={\"w-1/12 text-sm pl-1\"}>{index + 1}</td>\n                    <td className={\"w-5/12 text-sm\"}>{element[0]}</td>\n                    <td className={\"w-5/12 text-sm\"}>{element[1]}</td>\n                    <td className={\"w-1/12 text-sm text-right pr-1\"}>\n                        <button className={\"focus:outline-none\"} onClick={context.onClick.bind(context, index)}>\n                            <span className={\"text-red-300\"}>&#10006;</span>\n                        </button>\n                    </td>\n                </tr>\n            ));\n        });\n\n        return nodes;\n    }\n\n    public renderNoDataMessage(): React.ReactNode | void\n    {\n\n        if (this.props.data.length === 0)\n            return (\n                <tr className={\"mt-1 text-sm text-gray-500\"}>\n                    <td className={\"pl-1\"}>1</td>\n                    <td>Lorem ipsum dolor sit amet</td>\n                    <td>consectetur adipiscing elit</td>\n                </tr>\n            );\n    }\n}\n\nexport default VocabularyTable;","import React from 'react';\nimport Button from '../ui/Button';\n\ninterface Props\n{\n    timeLimit: number;\n\n    onChangeTimeLimit(value: number): void;\n\n    onClickClear(): void;\n\n    onClickSwap(): void;\n\n    onClickDownload(): void;\n}\n\nclass VocabularyTools extends React.PureComponent<Props>\n{\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public onChange(event: React.FormEvent<HTMLSelectElement>): void\n    {\n        const value: number = parseInt(event.currentTarget.value);\n        this.props.onChangeTimeLimit(value);\n    }\n\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): React.ReactNode\n    {\n        return (\n            <div className={\"flex justify-between\"}>\n                <div className={\"flex items-center\"}>\n                    <select\n                        className={\"w-12 h-8\"} value={20}\n                        onChange={this.onChange.bind(this)}>\n                        <option value={\"5\"}>5</option>\n                        <option value={\"10\"}>10</option>\n                        <option value={\"20\"}>20</option>\n                        <option value={\"30\"}>30</option>\n                        <option value={\"60\"}>60</option>\n                        <option value={\"90\"}>90</option>\n                        <option value={\"120\"}>120</option>\n                        <option value={\"240\"}>240</option>\n                    </select>\n\n                    <span className={\"text-white ml-2\"}>seconds per question</span>\n                </div>\n\n                <div>\n                    <Button\n                        className={\"w-10 text-white bg-red-300 border-red-400\"}\n                        onClick={this.props.onClickClear}>\n                        &#8634;\n                    </Button>\n\n                    <Button\n                        className={\"w-10 text-white bg-yellow-300 border-yellow-400 ml-2\"}\n                        onClick={this.props.onClickSwap}>\n                        &#8646;\n                    </Button>\n\n                    <Button\n                        className={\"w-24 text-white bg-green-300 border-green-400 ml-2\"}\n                        onClick={this.props.onClickDownload}>\n                        Download\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default VocabularyTools;","import {KahootQuestion} from './KahootQuestion';\n\nexport class KahootQuiz\n{\n    private _questions: KahootQuestion[];\n    private readonly _timeLimit: number;\n\n    constructor(timeLimit: number)\n    {\n        this._questions = [];\n        this._timeLimit = timeLimit;\n    }\n\n    get questions(): KahootQuestion[]\n    {\n        return this._questions;\n    }\n\n    get timeLimit(): number\n    {\n        return this._timeLimit;\n    }\n\n    public push(kahootQuestion: KahootQuestion): void\n    {\n        this._questions.push(kahootQuestion);\n    }\n}","export class KahootQuestion\n{\n    private readonly _question: string;\n    private readonly _answers: string[];\n    private readonly _answerPosition: number;\n\n    constructor(question: string, answers: string[], answerPosition: number)\n    {\n        this._question = question;\n        this._answers = answers;\n        this._answerPosition = answerPosition;\n    }\n\n    get question(): string\n    {\n        return this._question;\n    }\n\n    get answers(): string[]\n    {\n        return this._answers;\n    }\n\n    get answerPosition(): number\n    {\n        return this._answerPosition;\n    }\n}","export class Random\n{\n    public static number(minimum: number, maximum: number): number\n    {\n        return Math.floor(Math.random() * maximum - minimum + 1) + minimum;\n    }\n}","import XLSX from 'xlsx';\nimport {KahootQuiz} from '../models/KahootQuiz';\nimport {KahootQuestion} from '../models/KahootQuestion';\n\nexport class Kahoot\n{\n    public static exportToXLSX(kahootQuiz: KahootQuiz): XLSX.WorkBook\n    {\n        let data = Kahoot.quizToXLSXFormat(kahootQuiz);\n        data.unshift(['Question', 'Answer 1', 'Answer 2', 'Answer 3', 'Answer 4', 'Time limit', 'Correct answer']);\n\n        const workbook: XLSX.WorkBook = XLSX.utils.book_new();\n\n        workbook.SheetNames.push('Kahoot quiz');\n        workbook.Sheets['Kahoot quiz'] = XLSX.utils.aoa_to_sheet(data);\n\n        return workbook;\n    }\n\n    public static quizToXLSXFormat(kahootQuiz: KahootQuiz): string[][]\n    {\n        let result: string[][] = [];\n\n        kahootQuiz.questions.forEach(function (question: KahootQuestion) {\n            let data: string[] = [];\n\n            data.push(question.question)\n            data = data.concat(question.answers);\n\n            data.push(kahootQuiz.timeLimit.toString());\n            data.push(question.answerPosition.toString());\n\n            result.push(data);\n        });\n\n        return result;\n    }\n}","import XLSX from 'xlsx';\nimport {KahootQuiz} from '../models/KahootQuiz';\nimport {KahootQuestion} from '../models/KahootQuestion';\nimport {Random} from '../helpers/Random';\nimport {Kahoot} from '../helpers/Kahoot';\n\nexport class KahootService\n{\n    public static createQuiz(data: string[][], timeLimit: number): KahootQuiz\n    {\n        let kahootQuiz: KahootQuiz = new KahootQuiz(timeLimit);\n        let availableAnswers: string[] = data.map(function (element: string[]): string {\n            return element[1];\n        });\n\n        let buffer: string[][] = [];\n        let bufferSize: number = Math.floor(data.length / 16);\n\n        data.forEach(function (element: string[]) {\n            kahootQuiz.push(KahootService.createSingleQuestion(element, availableAnswers, buffer));\n            let toRecover: string[] = KahootService.shiftBuffer(buffer, bufferSize);\n            availableAnswers = [...availableAnswers, ...toRecover];\n        });\n\n        return kahootQuiz;\n    }\n\n    public static exportToXLSX(kahootQuiz: KahootQuiz): XLSX.WorkBook\n    {\n        return Kahoot.exportToXLSX(kahootQuiz);\n    }\n\n    private static createSingleQuestion(data: string[], availableAnswers: string[], buffer: string[][]): KahootQuestion\n    {\n        const question: string = data[0];\n\n        const answer: string = data[1];\n        const answerIndex: number = availableAnswers.indexOf(answer);\n        const answerPosition: number = Random.number(0, 3);\n\n        let answers: string[] = [];\n        answers[answerPosition] = answer;\n\n        let addToBuffer: string[] = [];\n\n        if (answerIndex !== -1) {\n            availableAnswers.splice(answerIndex, 1);\n            addToBuffer.push(answer);\n        }\n\n        this.pickRandomAnswers(answers, answerPosition, availableAnswers, addToBuffer);\n\n        buffer.push(addToBuffer);\n\n        return new KahootQuestion(question, answers, answerPosition);\n    }\n\n    private static pickRandomAnswers(\n        answers: string[],\n        answerPosition: number,\n        availableAnswers: string[],\n        buffer: string[]\n    ): void\n    {\n        let position = 0;\n\n        while ((answers.length === 4 && position < 3) || answers.length < 4) {\n            if (position === answerPosition) position++;\n\n            let randomIndex = Random.number(0, availableAnswers.length) - 1;\n            let randomAnswer: string = availableAnswers[randomIndex];\n\n            answers[position] = randomAnswer;\n            buffer.push(randomAnswer);\n            availableAnswers.splice(randomIndex, 1);\n\n            position++;\n        }\n    }\n\n    private static shiftBuffer(buffer: string[][], bufferSize: number): string[]\n    {\n        let toRecover: string[] = [];\n\n        if (buffer.length >= bufferSize) toRecover = buffer.splice(0, 1)[0];\n\n        return toRecover;\n    }\n}","import React, {ReactNode} from 'react';\nimport XLSX from 'xlsx';\n\nimport VocabularyInput from \"./VocabularyInput\";\nimport VocabularyTable from './VocabularyTable';\nimport VocabularyTools from './VocabularyTools';\n\nimport {KahootService} from '../../services/KahootService';\nimport {KahootQuiz} from '../../models/KahootQuiz';\n\ninterface State\n{\n    data: string[][];\n    timeLimit: number;\n}\n\nclass VocabularyScreen extends React.Component<{}, State>\n{\n    constructor(props: {})\n    {\n        super(props);\n\n        this.state = {\n            data: [],\n            timeLimit: 20\n        }\n    }\n\n\n    /*----------------------------------------\n    |   Component event methods\n    *----------------------------------------*/\n\n    public onSubmitVocabularyInput(term: string, answer: string): void\n    {\n        let newState = [...this.state.data];\n        newState.push([term, answer]);\n\n        this.setState({data: newState});\n    }\n\n    public onRemoveRowVocabularyTable(index: number): void\n    {\n        let newState: string[][] = [...this.state.data];\n\n        if (newState[index] !== undefined) {\n            newState.splice(index, 1);\n            this.setState({data: newState})\n        }\n    }\n\n    public onChangeTimeLimitVocabularyTools(value: number): void\n    {\n        this.setState({timeLimit: value});\n    }\n\n    public onClickClearVocabularyTools(): void\n    {\n        this.setState({data: []})\n    }\n\n    public onClickSwapVocabubaryTools(): void\n    {\n        let newState: string[][] = [];\n\n        this.state.data.forEach(function (element: string[]) {\n            newState.push([element[1], element[0]]);\n        });\n\n        this.setState({data: newState});\n    }\n\n    public onClickDownloadVocabularyTools(): void\n    {\n        if (this.dataHasFourOrMoreEntries()) {\n            const kahootQuiz: KahootQuiz = KahootService.createQuiz(this.state.data, this.state.timeLimit);\n            const xlsx: XLSX.WorkBook = KahootService.exportToXLSX(kahootQuiz);\n\n            XLSX.writeFile(xlsx, 'Kahoot2Vocabulary.xlsx');\n        } else {\n            alert('At least four terms are required to create a Kahoot quiz');\n        }\n    }\n\n\n    /*----------------------------------------\n    |   Validate methods\n    *----------------------------------------*/\n\n    public dataHasFourOrMoreEntries(): boolean\n    {\n        return this.state.data.length >= 4;\n    }\n\n    /*----------------------------------------\n    |   Render methods\n    *----------------------------------------*/\n\n    public render(): ReactNode\n    {\n        return (\n            <React.Fragment>\n                <header className={\"mt-10\"}>\n                    <h1 className={\"text-2xl text-white text-center font-bold\"}>Vocabulary2Kahoot</h1>\n                </header>\n\n                <div className={\"min-w-lg max-w-xl mx-auto mt-3\"}>\n                    <VocabularyInput onSubmit={this.onSubmitVocabularyInput.bind(this)}/>\n\n                    <div className={\"mt-3\"}>\n                        <VocabularyTools\n                            timeLimit={this.state.timeLimit}\n                            onChangeTimeLimit={this.onChangeTimeLimitVocabularyTools.bind(this)}\n                            onClickClear={this.onClickClearVocabularyTools.bind(this)}\n                            onClickSwap={this.onClickSwapVocabubaryTools.bind(this)}\n                            onClickDownload={this.onClickDownloadVocabularyTools.bind(this)}\n                        />\n                    </div>\n\n                    <div className={\"mt-3\"}>\n                        <VocabularyTable data={this.state.data}\n                                         onRemoveRow={this.onRemoveRowVocabularyTable.bind(this)}/>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default VocabularyScreen;","import React from 'react';\nimport './App.css';\nimport VocabularyScreen from \"./components/vocabulary/VocabularyScreen\";\n\nclass App extends React.Component\n{\n    public render(): React.ReactNode\n    {\n        return (<VocabularyScreen/>);\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/tailwind.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}